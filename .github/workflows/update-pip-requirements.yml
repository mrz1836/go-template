# ------------------------------------------------------------------------------
#  Update pip Requirements Workflow
#
#  Purpose: Automatically update Python dependencies listed in
#           `.github/pip-requirements.txt` and open a pull request
#
#  Triggers: Runs every Monday at 08:20 UTC and can be triggered manually.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------

name: update-pip-requirements

# ----------------------------------------------------------------------------
# Workflow Triggers
# ----------------------------------------------------------------------------
on:
  schedule:
    # ┌─ min ┬─ hour ┬─ dom ┬─ mon ┬─ dow ┐
    - cron: '20 8 * * 1'   # Every Monday at 08:20 UTC
  workflow_dispatch:        # Allow manual triggering from the GitHub UI

# ----------------------------------------------------------------------------
# Minimal top-level permissions
# ----------------------------------------------------------------------------
permissions:
  contents: read

# -----------------------------------------------------------------------------
# Cancel in-progress runs of the same branch or tag
# -----------------------------------------------------------------------------
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BRANCH_NAME: chore/update-pip-requirements
  REQUIREMENTS_FILE: .github/pip-requirements.txt

jobs:
  # ---------------------------------------------------------------------------
  # Main job: update pip requirements file and open a PR
  # ---------------------------------------------------------------------------
  update-requirements:
    runs-on: ubuntu-latest
    permissions:
      contents: write        # For creating branches and commits
      pull-requests: write   # For creating PRs

    steps:
      # ————————————————————————————————————————————————————————————————
      # 1. Check out the repository
      # ————————————————————————————————————————————————————————————————
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_PAT_TOKEN }}  # Use PAT for write operations

      # ————————————————————————————————————————————————————————————————
      # 2. Set up Python for dependency management
      # ————————————————————————————————————————————————————————————————
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.x'

      # ————————————————————————————————————————————————————————————————
      # 3. Cache pip downloads to speed up later runs
      # ————————————————————————————————————————————————————————————————
      - name: Cache pip dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/pip-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ————————————————————————————————————————————————————————————————
      # 4. Check if requirements file exists
      # ————————————————————————————————————————————————————————————————
      - name: Verify requirements file exists
        run: |
          if [ ! -f "${{ env.REQUIREMENTS_FILE }}" ]; then
            echo "❌ Requirements file not found: ${{ env.REQUIREMENTS_FILE }}"
            echo "Creating basic requirements file..."
            mkdir -p "$(dirname "${{ env.REQUIREMENTS_FILE }}")"
            echo "# Python dependencies for GitHub Actions" > "${{ env.REQUIREMENTS_FILE }}"
            echo "# Updated automatically by update-pip-requirements workflow" >> "${{ env.REQUIREMENTS_FILE }}"
          else
            echo "✅ Requirements file found: ${{ env.REQUIREMENTS_FILE }}"
          fi

      # ————————————————————————————————————————————————————————————————
      # 5. Update the requirement file using the helper script
      # ————————————————————————————————————————————————————————————————
      - name: Update requirements file
        run: |
          if [ -f ".github/scripts/update_pip_requirements.py" ]; then
            echo "Running custom update script..."
            python .github/scripts/update_pip_requirements.py
          else
            echo "No custom script found, using default pip-tools approach..."
            pip install pip-tools==7.4.1 --hash=sha256:4c690e5fbae2f21e87843e89c26191f0d9454f362d8acdbd695716493ec8b3a9
            # If requirements.in exists, compile it; otherwise work with existing .txt
            if [ -f ".github/pip-requirements.in" ]; then
              pip-compile --upgrade .github/pip-requirements.in --output-file "${{ env.REQUIREMENTS_FILE }}"
            else
              echo "No .in file found, attempting to upgrade existing requirements..."
              pip install --upgrade --require-hashes -r "${{ env.REQUIREMENTS_FILE }}" --dry-run || echo "No packages to upgrade"
            fi
          fi

      # ————————————————————————————————————————————————————————————————
      # 6. Check for changes and configure git
      # ————————————————————————————————————————————————————————————————
      - name: Check for changes and setup git
        id: changes
        run: |
          # Configure git user
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes
          if git diff --quiet "${{ env.REQUIREMENTS_FILE }}"; then
            echo "No changes detected in requirements file"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in requirements file"
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Show the diff for logging
            echo "--- Changes detected ---"
            git diff "${{ env.REQUIREMENTS_FILE }}"
          fi

      # ————————————————————————————————————————————————————————————————
      # 7. Check if PR branch already exists
      # ————————————————————————————————————————————————————————————————
      - name: Check for existing PR branch
        id: check_branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Check if branch exists locally or remotely
          if git ls-remote --exit-code --heads origin "${{ env.BRANCH_NAME }}" >/dev/null 2>&1; then
            echo "Branch ${{ env.BRANCH_NAME }} already exists remotely"
            echo "branch_exists=true" >> $GITHUB_OUTPUT

            # Check if there's already an open PR
            pr_number=$(gh pr list --head "${{ env.BRANCH_NAME }}" --json number --jq '.[0].number // empty')
            if [ -n "$pr_number" ]; then
              echo "Open PR already exists: #$pr_number"
              echo "pr_exists=true" >> $GITHUB_OUTPUT
              echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            else
              echo "Branch exists but no open PR found"
              echo "pr_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Branch ${{ env.BRANCH_NAME }} does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # 8. Create or update branch and commit changes
      # ————————————————————————————————————————————————————————————————
      - name: Create branch and commit changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Create or switch to the branch
          if [ "${{ steps.check_branch.outputs.branch_exists }}" = "true" ]; then
            echo "Switching to existing branch..."
            git fetch origin "${{ env.BRANCH_NAME }}"
            git checkout "${{ env.BRANCH_NAME }}"
            git merge origin/main  # Ensure branch is up to date
          else
            echo "Creating new branch..."
            git checkout -b "${{ env.BRANCH_NAME }}"
          fi

          # Stage and commit the changes
          git add "${{ env.REQUIREMENTS_FILE }}"

          # Create commit message with details
          commit_msg="chore(deps): update pip requirements

          Automated dependency update:
          - Updated Python packages to latest versions
          - Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}"

          git commit -m "$commit_msg"

          # Push the branch
          git push origin "${{ env.BRANCH_NAME }}"
          echo "✅ Changes committed and pushed to ${{ env.BRANCH_NAME }}"

      # ————————————————————————————————————————————————————————————————
      # 9. Create or update pull request using GitHub CLI
      # ————————————————————————————————————————————————————————————————
      - name: Create or update pull request
        if: steps.changes.outputs.has_changes == 'true' && steps.check_branch.outputs.pr_exists != 'true'
        run: |
          # Generate PR body with details
          pr_body="## 🤖 Automated Pip Requirements Update

          This PR updates Python dependencies in \`${{ env.REQUIREMENTS_FILE }}\`.

          ### 📋 Changes
          - Updated Python packages to their latest compatible versions
          - Automated update run on $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ### 🔍 Review Notes
          - Please review the dependency changes carefully
          - Check for any breaking changes in updated packages
          - Ensure all tests pass before merging

          ### 🤖 Automation Details
          - **Workflow:** \`${{ github.workflow }}\`
          - **Trigger:** ${{ github.event_name }}
          - **Run ID:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---

          This PR was created automatically. If you need to make manual changes, please:
          1. Checkout the \`${{ env.BRANCH_NAME }}\` branch
          2. Make your modifications
          3. Push your changes to update this PR"

          # Create the pull request
          pr_url=$(gh pr create \
            --title "chore(deps): update pip requirements" \
            --body "$pr_body" \
            --head "${{ env.BRANCH_NAME }}" \
            --base main \
            --label "dependencies,chore,automated" \
            --assignee "mrz1836")

          echo "✅ Pull request created: $pr_url"

          # Add a comment with diff summary if PR was created
          gh pr comment "$pr_url" --body "### 📊 Summary of Changes

          \`\`\`diff
          $(git diff HEAD~1 "${{ env.REQUIREMENTS_FILE }}")
          \`\`\`"

        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # 10. Update existing PR if changes detected
      # ————————————————————————————————————————————————————————————————
      - name: Update existing PR
        if: steps.changes.outputs.has_changes == 'true' && steps.check_branch.outputs.pr_exists == 'true'
        run: |
          pr_number="${{ steps.check_branch.outputs.pr_number }}"

          echo "Updating existing PR #$pr_number with new changes..."

          # Add comment about the update
          gh pr comment "$pr_number" --body "### 🔄 Updated Dependencies

          New changes detected and committed to this PR:
          - Updated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Run ID: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Latest Changes:
          \`\`\`diff
          $(git diff HEAD~1 "${{ env.REQUIREMENTS_FILE }}")
          \`\`\`"

          echo "✅ Existing PR #$pr_number updated with new changes"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # 11. Report final status
      # ————————————————————————————————————————————————————————————————
      - name: Report workflow status
        run: |
          echo "=== Pip Requirements Update Summary ==="
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            if [ "${{ steps.check_branch.outputs.pr_exists }}" = "true" ]; then
              echo "✅ Status: Updated existing PR #${{ steps.check_branch.outputs.pr_number }}"
            else
              echo "✅ Status: Created new pull request"
            fi
            echo "📁 File: ${{ env.REQUIREMENTS_FILE }}"
            echo "🌿 Branch: ${{ env.BRANCH_NAME }}"
          else
            echo "ℹ️ Status: No changes detected - requirements are up to date"
          fi
          echo "🕐 Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

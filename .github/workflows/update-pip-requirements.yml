# ------------------------------------------------------------------------------------
#  Update Pip Requirements Workflow
#
#  Purpose: Automatically update Python dependencies listed in
#           `.github/pip-requirements.txt` and open a pull request with the changes.
#           This workflow ensures Python dependencies stay current with security
#           patches and feature updates.
#
#  Configuration: All settings are loaded from .github/.env.shared for centralized
#  management across all workflows.
#
#  Triggers:
#  - Scheduled: Every Monday at 08:20 UTC
#  - Manual: Via workflow_dispatch
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: update-pip-requirements

# ————————————————————————————————————————————————————————————————
# Trigger Configuration
# ————————————————————————————————————————————————————————————————
on:
  schedule:
    # ┌─ min ┬─ hour ┬─ dom ┬─ mon ┬─ dow ┐
    - cron: '20 8 * * 1'   # Every Monday at 08:20 UTC
  workflow_dispatch:        # Allow manual triggering from the GitHub UI

# ————————————————————————————————————————————————————————————————
# Permissions
# ————————————————————————————————————————————————————————————————
permissions:
  contents: read

# ————————————————————————————————————————————————————————————————
# Concurrency Control
# ————————————————————————————————————————————————————————————————
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ————————————————————————————————————————————————————————————————
# Environment Variables
# ————————————————————————————————————————————————————————————————
# Note: Configuration variables are loaded from .github/.env.shared

jobs:
  # ----------------------------------------------------------------------------------
  # Load Environment Variables from .env.shared
  # ----------------------------------------------------------------------------------
  load-env:
    name: 🌍 Load Environment Variables
    runs-on: ubuntu-latest
    outputs:
      env-json: ${{ steps.load-env.outputs.env-json }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Check out code to access env file
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code (sparse)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            .github/.env.shared

      # ————————————————————————————————————————————————————————————————
      # Load and parse environment file
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Load environment variables
        id: load-env
        run: |
          echo "📋 Loading environment variables from .github/.env.shared..."

          # Convert .env file to JSON for easy passing between jobs
          # Strip inline comments and process the file
          ENV_JSON=$(cat .github/.env.shared | \
            grep -v '^#' | \
            grep -v '^$' | \
            sed 's/#.*$//' | \
            sed 's/[[:space:]]*$//' | \
            jq -Rs 'split("\n") | map(select(length > 0) | split("=") | select(length == 2) | {(.[0]): .[1]}) | add')

          # Check to make sure we have an ENV and it is not empty
          if [[ -z "$ENV_JSON" ]]; then
              echo "❌ ERROR: Environment variables are empty or not set." >&2
              exit 1
          fi

          # Properly escape the JSON for GitHub Actions output
          echo "env-json<<EOF" >> $GITHUB_OUTPUT
          echo "$ENV_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "✅ Environment variables loaded successfully"

  # ----------------------------------------------------------------------------------
  # Update Python Requirements
  # ----------------------------------------------------------------------------------
  update-requirements:
    name: 📦 Update Python Requirements
    needs: [load-env]
    runs-on: ubuntu-latest
    permissions:
      contents: write        # For creating branches and commits
      pull-requests: write   # For creating PRs

    steps:
      # ————————————————————————————————————————————————————————————————
      # Extract configuration from env-json
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Extract configuration
        id: config
        env:
          ENV_JSON: ${{ needs.load-env.outputs.env-json }}
        run: |
          echo "📋 Extracting configuration from environment..."
          
          # Extract all needed variables
          BRANCH_NAME=$(echo "$ENV_JSON" | jq -r '.UPDATE_PIP_REQUIREMENTS_BRANCH')
          REQUIREMENTS_FILE=$(echo "$ENV_JSON" | jq -r '.PIP_REQUIREMENTS_FILE')
          PREFERRED_TOKEN=$(echo "$ENV_JSON" | jq -r '.PREFERRED_GITHUB_TOKEN')
          
          # Set as environment variables for all subsequent steps
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "REQUIREMENTS_FILE=$REQUIREMENTS_FILE" >> $GITHUB_ENV
          
          # Log configuration
          echo "🔍 Configuration loaded:"
          echo "  📁 Requirements file: $REQUIREMENTS_FILE"
          echo "  🌿 Update branch: $BRANCH_NAME"
          
          if [[ "$PREFERRED_TOKEN" == "GH_PAT_TOKEN" && -n "${{ secrets.GH_PAT_TOKEN }}" ]]; then
            echo "  🔑 Token: Personal Access Token (PAT)"
          else
            echo "  🔑 Token: Default GITHUB_TOKEN"
          fi

      # ————————————————————————————————————————————————————————————————
      # Check out the repository
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Full history for branch operations

      # ————————————————————————————————————————————————————————————————
      # Set up Python for dependency management
      # ————————————————————————————————————————————————————————————————
      - name: 🐍 Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.x'

      # ————————————————————————————————————————————————————————————————
      # Cache pip downloads to speed up later runs
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Cache pip dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/pip-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ————————————————————————————————————————————————————————————————
      # Check an if requirements file exists
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Verify requirements file exists
        run: |
          echo "🔍 Checking for requirements file..."
          if [ ! -f "${{ env.REQUIREMENTS_FILE }}" ]; then
            echo "❌ Requirements file not found: ${{ env.REQUIREMENTS_FILE }}"
            echo "📝 Creating basic requirements file..."
            mkdir -p "$(dirname "${{ env.REQUIREMENTS_FILE }}")"
            cat > "${{ env.REQUIREMENTS_FILE }}" << 'EOF'
            # Python dependencies for GitHub Actions
            # Updated automatically by update-pip-requirements workflow
            #
            # This file uses pip-tools hash verification for security
            # To regenerate hashes: pip-compile --generate-hashes requirements.in
            EOF
            echo "✅ Created basic requirements file"
          else
            echo "✅ Requirements file found: ${{ env.REQUIREMENTS_FILE }}"
            echo "📋 Current file contents:"
            head -20 "${{ env.REQUIREMENTS_FILE }}"
          fi

      # ————————————————————————————————————————————————————————————————
      # Backup original file for comparison
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Backup original requirements
        run: |
          echo "💾 Creating backup of requirements file..."
          cp "${{ env.REQUIREMENTS_FILE }}" "${{ env.REQUIREMENTS_FILE }}.backup"
          echo "✅ Backup created for comparison"

      # ————————————————————————————————————————————————————————————————
      # Update the requirement file using the helper script
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Update requirements file
        id: update
        run: |
          echo "🔄 Starting requirements update process..."

          if [ -f ".github/scripts/update_pip_requirements.py" ]; then
            echo "🐍 Running custom update script..."
            python .github/scripts/update_pip_requirements.py
          else
            echo "📦 No custom script found, using default pip-tools approach..."

            # Install pip-tools from pinned, hash-verified requirements
            echo "📦 Installing pip-tools..."
            pip install --require-hashes -r "${{ env.REQUIREMENTS_FILE }}" 2>/dev/null || \
              pip install pip-tools

            # If requirements.in exists, compile it; otherwise work with existing .txt
            if [ -f ".github/pip-requirements.in" ]; then
              echo "📝 Found requirements.in file, compiling..."
              pip-compile --upgrade --generate-hashes \
                .github/pip-requirements.in \
                --output-file "${{ env.REQUIREMENTS_FILE }}"
            else
              echo "⚠️ No .in file found, attempting to upgrade existing requirements..."
              # Create a temporary .in file from existing requirements
              grep -v '^#' "${{ env.REQUIREMENTS_FILE }}" | \
                grep -v '^--' | \
                cut -d' ' -f1 | \
                grep -v '^$' > temp-requirements.in

              if [ -s temp-requirements.in ]; then
                pip-compile --upgrade --generate-hashes \
                  temp-requirements.in \
                  --output-file "${{ env.REQUIREMENTS_FILE }}"
                rm temp-requirements.in
              else
                echo "⚠️ Could not extract package list from existing requirements"
              fi
            fi
          fi

          echo "✅ Update process completed"

      # ————————————————————————————————————————————————————————————————
      # Check for changes and configure git
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Check for changes and setup git
        id: changes
        run: |
          echo "🔍 Checking for changes in requirements..."

          # Configure git user
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes
          if ! cmp -s "${{ env.REQUIREMENTS_FILE }}" "${{ env.REQUIREMENTS_FILE }}.backup"; then
            echo "✅ Changes detected in requirements file"
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Generate a summary of changes
            echo "📊 Summary of changes:"
            diff -u "${{ env.REQUIREMENTS_FILE }}.backup" "${{ env.REQUIREMENTS_FILE }}" || true

            # Count changed packages
            UPDATED_COUNT=$(diff "${{ env.REQUIREMENTS_FILE }}.backup" "${{ env.REQUIREMENTS_FILE }}" | grep -E '^[<>]' | grep -v '^[<>] #' | wc -l)
            echo "updated_count=$UPDATED_COUNT" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No changes detected in requirements file"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

          # Clean up backup
          rm "${{ env.REQUIREMENTS_FILE }}.backup"

      # ————————————————————————————————————————————————————————————————
      # Check if PR branch already exists
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Check for existing PR branch
        id: check_branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "🔍 Checking for existing branch and PR..."

          # Check if branch exists remotely
          if git ls-remote --exit-code --heads origin "${{ env.BRANCH_NAME }}" >/dev/null 2>&1; then
            echo "🌿 Branch ${{ env.BRANCH_NAME }} already exists remotely"
            echo "branch_exists=true" >> $GITHUB_OUTPUT

            # Check if there's already an open PR
            pr_number=$(gh pr list --head "${{ env.BRANCH_NAME }}" --json number --jq '.[0].number // empty')
            if [ -n "$pr_number" ]; then
              echo "📋 Open PR already exists: #$pr_number"
              echo "pr_exists=true" >> $GITHUB_OUTPUT
              echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            else
              echo "🌿 Branch exists but no open PR found"
              echo "pr_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "🆕 Branch ${{ env.BRANCH_NAME }} does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # Create or update branch and commit changes
      # ————————————————————————————————————————————————————————————————
      - name: 🌿 Create branch and commit changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "🌿 Preparing to commit changes..."

          # Create or switch to the branch
          if [ "${{ steps.check_branch.outputs.branch_exists }}" = "true" ]; then
            echo "🔄 Switching to existing branch..."
            git fetch origin "${{ env.BRANCH_NAME }}"
            git checkout "${{ env.BRANCH_NAME }}"
            git merge origin/main --no-edit || echo "⚠️ Merge conflicts may need manual resolution"
          else
            echo "🆕 Creating new branch..."
            git checkout -b "${{ env.BRANCH_NAME }}"
          fi

          # Stage and commit the changes
          git add "${{ env.REQUIREMENTS_FILE }}"

          # Create detailed commit message
          commit_msg="chore(deps): update pip requirements

          Automated dependency update:
          - Updated Python packages to latest versions
          - Total packages modified: ~${{ steps.changes.outputs.updated_count }}
          - Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}

          🤖 Generated by GitHub Actions"

          git commit -m "$commit_msg"

          # Push the branch
          git push origin "${{ env.BRANCH_NAME }}"
          echo "✅ Changes committed and pushed to ${{ env.BRANCH_NAME }}"

      # ————————————————————————————————————————————————————————————————
      # Create a new pull request using GitHub CLI
      # ————————————————————————————————————————————————————————————————
      - name: 🔀 Create new pull request
        if: steps.changes.outputs.has_changes == 'true' && steps.check_branch.outputs.pr_exists != 'true'
        run: |
          echo "🔀 Creating new pull request..."

          # Generate detailed PR body
          pr_body="## 🤖 Automated Pip Requirements Update

          This PR updates Python dependencies in \`${{ env.REQUIREMENTS_FILE }}\`.

          ### 📋 Changes Made
          - Updated Python packages to their latest compatible versions
          - All packages use hash verification for security
          - Automated update run on $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ### 🔍 What's Updated
          Review the Files tab to see specific version changes for each package.

          ### ✅ Benefits
          - 🔒 Security patches and vulnerability fixes
          - 🚀 Performance improvements and bug fixes
          - 📦 New features from updated dependencies
          - 🔧 Better compatibility with modern Python environments

          ### 🧪 Next Steps
          1. **Review the changes** in the Files tab
          2. **Check CI status** - automated tests will verify compatibility
          3. **Merge when ready** - no manual action needed unless tests fail

          ### 🔐 Security Notes
          - All packages use hash verification (\`--require-hashes\`)
          - Hashes are automatically updated with package versions
          - This ensures package integrity and prevents tampering

          ### 🤖 Automation Details
          - **Workflow:** \`${{ github.workflow }}\`
          - **Trigger:** ${{ github.event_name }}
          - **Run ID:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---

          **Note:** This PR was created automatically. To customize the update process:
          1. Modify \`.github/pip-requirements.in\` (if using pip-tools)
          2. Update \`.github/scripts/update_pip_requirements.py\` for custom logic
          3. Push changes to the \`${{ env.BRANCH_NAME }}\` branch"

          # Create the pull request
          pr_url=$(gh pr create \
            --title "chore(deps): update pip requirements" \
            --body "$pr_body" \
            --head "${{ env.BRANCH_NAME }}" \
            --base main \
            --label "dependencies,chore,automated,python" \
            --assignee "mrz1836")

          echo "✅ Pull request created: $pr_url"

          # Add a comment with the specific changes
          gh pr comment "$pr_url" --body "### 📊 Package Changes

          \`\`\`diff
          $(git diff HEAD~1 "${{ env.REQUIREMENTS_FILE }}" | grep -E '^[+-]' | grep -v '^[+-]#' | head -50)
          \`\`\`

          **Tip:** You can test these changes locally by running:
          \`\`\`bash
          pip install --require-hashes -r ${{ env.REQUIREMENTS_FILE }}
          \`\`\`"

        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # Update existing PR if changes detected
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Update existing PR
        if: steps.changes.outputs.has_changes == 'true' && steps.check_branch.outputs.pr_exists == 'true'
        run: |
          pr_number="${{ steps.check_branch.outputs.pr_number }}"

          echo "🔄 Updating existing PR #$pr_number with new changes..."

          # Add comment about the update
          gh pr comment "$pr_number" --body "### 🔄 Requirements Updated Again

          New changes detected and committed to this PR:
          - Updated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Run ID: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Latest Changes:
          \`\`\`diff
          $(git diff HEAD~1 "${{ env.REQUIREMENTS_FILE }}" | grep -E '^[+-]' | grep -v '^[+-]#' | head -50)
          \`\`\`

          The PR now contains the most recent package versions available."

          echo "✅ Existing PR #$pr_number updated with new changes"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # Test updated requirements (optional verification)
      # ————————————————————————————————————————————————————————————————
      - name: 🧪 Test updated requirements
        if: steps.changes.outputs.has_changes == 'true'
        continue-on-error: true  # Don't fail workflow if test installation has issues
        run: |
          echo "🧪 Testing updated requirements..."

          # Create a virtual environment for testing
          python -m venv test-env
          source test-env/bin/activate || . test-env/Scripts/activate

          # Try to install the updated requirements
          echo "📦 Attempting to install updated requirements..."
          if pip install --require-hashes -r "${{ env.REQUIREMENTS_FILE }}"; then
            echo "✅ All requirements installed successfully"

            # Show installed versions
            echo "📋 Installed packages:"
            pip list
          else
            echo "⚠️ Some packages failed to install - this will need attention in the PR"
          fi

          # Clean up
          deactivate || true
          rm -rf test-env

      # ————————————————————————————————————————————————————————————————
      # Generate a workflow summary report
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Generate workflow summary
        run: |
          echo "📊 Generating workflow summary..."

          echo "# 📦 Pip Requirements Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⏰ Completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "## ✅ Changes Detected and Processed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Metric | 📈 Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Status** | 🔄 Requirements updated |" >> $GITHUB_STEP_SUMMARY
            echo "| **Packages Modified** | ~${{ steps.changes.outputs.updated_count }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Branch** | \`${{ env.BRANCH_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **File** | \`${{ env.REQUIREMENTS_FILE }}\` |" >> $GITHUB_STEP_SUMMARY

            if [ "${{ steps.check_branch.outputs.pr_exists }}" = "true" ]; then
              echo "| **Action** | Updated existing PR #${{ steps.check_branch.outputs.pr_number }} |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Action** | Created new pull request |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ℹ️ No Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Python dependencies are already at their latest versions." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🤖 _Automated by GitHub Actions_" >> $GITHUB_STEP_SUMMARY

      # ————————————————————————————————————————————————————————————————
      # Report final workflow status
      # ————————————————————————————————————————————————————————————————
      - name: 📢 Report workflow status
        run: |
          echo "=== 📦 Pip Requirements Update Summary ==="
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            if [ "${{ steps.check_branch.outputs.pr_exists }}" = "true" ]; then
              echo "✅ Status: Updated existing PR #${{ steps.check_branch.outputs.pr_number }}"
            else
              echo "✅ Status: Created new pull request"
            fi
            echo "📁 File: ${{ env.REQUIREMENTS_FILE }}"
            echo "🌿 Branch: ${{ env.BRANCH_NAME }}"
            echo "📊 Packages updated: ~${{ steps.changes.outputs.updated_count }}"
          else
            echo "ℹ️ Status: No changes detected - requirements are up to date"
          fi
          echo "🕐 Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "✅ Workflow completed successfully!"

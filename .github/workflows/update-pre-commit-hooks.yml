# ------------------------------------------------------------------------------------
#  Update Pre-commit Hooks Workflow
#
#  Purpose: Automatically update pre-commit hooks to their latest versions and
#           open pull requests with the changes. This workflow ensures code quality
#           tools stay current with security patches and feature updates.
#
#  Configuration: All settings are loaded from .github/.env.shared for centralized
#  management across all workflows.
#
#  Triggers:
#  - Scheduled: Every Monday at 12:00 UTC (7:00 AM EST)
#  - Manual: Via workflow_dispatch with option
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: Update Pre-commit Hooks

# ————————————————————————————————————————————————————————————————
# Trigger Configuration
# ————————————————————————————————————————————————————————————————
on:
  schedule:
    # ┌─ min ┬─ hour ┬─ dom ┬─ mon ┬─ dow ┐
    - cron: "0 12 * * 1-5" # 7:00 AM EST (12:00 UTC)
  workflow_dispatch: # Allow manual triggering from the GitHub UI
    inputs:
      create_pr:
        description: "Create pull request with changes"
        required: false
        default: true
        type: boolean
      test_hooks:
        description: "Test hooks after update"
        required: false
        default: true
        type: boolean

# ————————————————————————————————————————————————————————————————
# Permissions
# ————————————————————————————————————————————————————————————————
permissions:
  contents: read

# ————————————————————————————————————————————————————————————————
# Concurrency Control
# ————————————————————————————————————————————————————————————————
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ————————————————————————————————————————————————————————————————
# Environment Variables
# ————————————————————————————————————————————————————————————————
# Note: Configuration variables are loaded from .github/.env.shared

jobs:
  # ----------------------------------------------------------------------------------
  # Load Environment Variables from .env.shared
  # ----------------------------------------------------------------------------------
  load-env:
    name: 🌍 Load Environment Variables
    runs-on: ubuntu-latest
    outputs:
      env-json: ${{ steps.load-env.outputs.env-json }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Check out code to access env file
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code (sparse)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            .github/.env.shared
            .github/actions/load-env

      # ————————————————————————————————————————————————————————————————
      # Load and parse environment file
      # ————————————————————————————————————————————————————————————————
      - name: 🌍 Load environment variables
        uses: ./.github/actions/load-env
        id: load-env

  # ----------------------------------------------------------------------------------
  # Update Pre-commit Hooks
  # ----------------------------------------------------------------------------------
  update-hooks:
    name: 🪝 Update Pre-commit Hooks
    needs: [load-env]
    runs-on: ubuntu-latest
    permissions:
      contents: write # For creating branches and commits
      pull-requests: write # For creating PRs
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
      pr_exists: ${{ steps.check_branch.outputs.pr_exists }}
      pr_number: ${{ steps.check_branch.outputs.pr_number }}
      hooks_updated: ${{ steps.analyze_changes.outputs.hooks_updated }}

    steps:
      # ————————————————————————————————————————————————————————————————
      # Extract configuration from env-json
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Extract configuration
        id: config
        env:
          ENV_JSON: ${{ needs.load-env.outputs.env-json }}
        run: |
          echo "📋 Extracting configuration from environment..."

          # Extract all needed variables
          BRANCH_NAME=$(echo "$ENV_JSON" | jq -r '.UPDATE_PRE_COMMIT_HOOKS_BRANCH')
          CONFIG_FILE=$(echo "$ENV_JSON" | jq -r '.PRE_COMMIT_CONFIG_FILE')
          PREFERRED_TOKEN=$(echo "$ENV_JSON" | jq -r '.PREFERRED_GITHUB_TOKEN')
          PR_LABELS=$(echo "$ENV_JSON" | jq -r '.UPDATE_PRE_COMMIT_HOOKS_PR_LABELS')
          PR_ASSIGNEE=$(echo "$ENV_JSON" | jq -r '.UPDATE_PRE_COMMIT_HOOKS_PR_ASSIGNEE')
          PIP_DIR=$(echo "$ENV_JSON" | jq -r '.PIP_DIRECTORY')

          # Validate required configuration
          if [[ -z "$BRANCH_NAME" ]] || [[ "$BRANCH_NAME" == "null" ]]; then
            echo "❌ ERROR: UPDATE_PRE_COMMIT_HOOKS_BRANCH not set in .env.shared" >&2
            exit 1
          fi
          if [[ -z "$CONFIG_FILE" ]] || [[ "$CONFIG_FILE" == "null" ]]; then
            echo "❌ ERROR: PRE_COMMIT_CONFIG_FILE not set in .env.shared" >&2
            exit 1
          fi

          # Create unique branch name with timestamp to avoid conflicts
          TIMESTAMP=$(date -u +%Y%m%d-%H%M)
          UNIQUE_BRANCH_NAME="${BRANCH_NAME}-${TIMESTAMP}"

          # Set as environment variables for all subsequent steps
          echo "BRANCH_NAME=$UNIQUE_BRANCH_NAME" >> $GITHUB_ENV
          echo "BASE_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV
          echo "PR_ASSIGNEE=$PR_ASSIGNEE" >> $GITHUB_ENV
          echo "PIP_DIR=$PIP_DIR" >> $GITHUB_ENV

          # Determine workflow behavior based on trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "CREATE_PR=${{ github.event.inputs.create_pr }}" >> $GITHUB_ENV
            echo "TEST_HOOKS=${{ github.event.inputs.test_hooks }}" >> $GITHUB_ENV
          else
            # Default behavior for scheduled runs - configurable from .env.shared
            DEFAULT_CREATE_PR=$(echo "$ENV_JSON" | jq -r '.UPDATE_PRE_COMMIT_HOOKS_SCHEDULE_CREATE_PR')
            DEFAULT_TEST_HOOKS=$(echo "$ENV_JSON" | jq -r '.UPDATE_PRE_COMMIT_HOOKS_TEST_ON_UPDATE')

            echo "CREATE_PR=$DEFAULT_CREATE_PR" >> $GITHUB_ENV
            echo "TEST_HOOKS=$DEFAULT_TEST_HOOKS" >> $GITHUB_ENV
          fi

          # Log configuration
          echo "🔍 Configuration loaded:"
          echo "  📁 Config file: $CONFIG_FILE"
          echo "  🌿 Base branch pattern: $BRANCH_NAME"
          echo "  🌿 Unique branch name: $UNIQUE_BRANCH_NAME"
          echo "  📁 Pip directory: $PIP_DIR"
          echo "  🔀 Create PR: ${{ env.CREATE_PR }}"
          echo "  🧪 Test hooks: ${{ env.TEST_HOOKS }}"

          if [[ "$PREFERRED_TOKEN" == "GH_PAT_TOKEN" && -n "${{ secrets.GH_PAT_TOKEN }}" ]]; then
            echo "  🔑 Token: Personal Access Token (PAT)"
          else
            echo "  🔑 Token: Default GITHUB_TOKEN"
          fi

      # ————————————————————————————————————————————————————————————————
      # Check out the repository
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Full history for branch operations

      # ————————————————————————————————————————————————————————————————
      # Verify pre-commit configuration exists
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Verify pre-commit config exists
        run: |
          echo "🔍 Checking for pre-commit configuration..."

          if [ ! -f "${{ env.CONFIG_FILE }}" ]; then
            echo "❌ Pre-commit config not found: ${{ env.CONFIG_FILE }}"
            echo "❌ Please ensure ${{ env.CONFIG_FILE }} exists in your repository"
            exit 1
          else
            echo "✅ Pre-commit config found: ${{ env.CONFIG_FILE }}"
            echo "📋 Current configuration:"
            echo "════════════════════════════════════════════════════════════════"
            head -20 "${{ env.CONFIG_FILE }}"
            echo "════════════════════════════════════════════════════════════════"
          fi

      # ————————————————————————————————————————————————————————————————
      # Set up Python for pre-commit
      # ————————————————————————————————————————————————————————————————
      - name: 🐍 Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"

      # ————————————————————————————————————————————————————————————————
      # Cache pip dependencies to speed up later runs
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Cache pip dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/pip/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ————————————————————————————————————————————————————————————————
      # Install pre-commit from secure requirements
      # ————————————————————————————————————————————————————————————————
      - name: 📦 Install pre-commit
        run: |
          echo "📦 Installing pre-commit..."

          # SECURITY: All pip installs MUST use --require-hashes
          if [ -f "${{ env.PIP_DIR }}/requirements.txt" ]; then
            echo "📦 Installing from ${{ env.PIP_DIR }}/requirements.txt..."
            pip install --require-hashes -r "${{ env.PIP_DIR }}/requirements.txt"
            echo "✅ Pre-commit installed with hash verification"
          else
            echo "❌ ERROR: Requirements file ${{ env.PIP_DIR }}/requirements.txt not found"
            echo "❌ This file is required for secure pre-commit installation"
            exit 1
          fi

          # Verify installation
          echo "🔍 Verifying pre-commit installation..."
          pre-commit --version
          echo "✅ Pre-commit ready"

      # ————————————————————————————————————————————————————————————————
      # Backup original config for comparison
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Backup original config
        run: |
          echo "💾 Creating backup of pre-commit configuration..."
          cp "${{ env.CONFIG_FILE }}" "${{ env.CONFIG_FILE }}.backup"
          echo "✅ Original config backed up for comparison"

      # ————————————————————————————————————————————————————————————————
      # Run pre-commit autoupdate and migrate config
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Update pre-commit hooks
        id: update
        run: |
          echo "🔄 Updating pre-commit hooks..."
          echo "════════════════════════════════════════════════════════════════"

          # Run autoupdate with --freeze for reproducible builds
          echo "📦 Running pre-commit autoupdate --freeze..."
          pre-commit autoupdate --freeze

          # Fix YAML formatting - ensure single space before frozen comments
          echo "🔧 Fixing YAML formatting for prettier compliance..."
          sed -i 's/  # frozen:/ # frozen:/g' "${{ env.CONFIG_FILE }}"

          # Migrate config if needed
          echo "🔧 Running config migration..."
          pre-commit migrate-config

          echo "✅ Update process completed"
          echo "════════════════════════════════════════════════════════════════"

      # ————————————————————————————————————————————————————————————————
      # Check for changes and analyze what was updated
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Check for changes
        id: check_changes
        run: |
          echo "🔍 Checking for changes in pre-commit configuration..."

          # Check if anything changed
          if ! cmp -s "${{ env.CONFIG_FILE }}" "${{ env.CONFIG_FILE }}.backup"; then
            echo "✅ Changes detected in pre-commit configuration"
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Show the diff for logging
            echo "📊 Changes detected:"
            echo "════════════════════════════════════════════════════════════════"
            diff -u "${{ env.CONFIG_FILE }}.backup" "${{ env.CONFIG_FILE }}" || true
            echo "════════════════════════════════════════════════════════════════"
          else
            echo "ℹ️ No changes detected in pre-commit configuration"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————————————————————————————————————————————
      # Analyze which hooks were updated
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Analyze hook updates
        id: analyze_changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "📊 Analyzing which hooks were updated..."

          # Extract hook names and versions that changed
          UPDATED_HOOKS=$(diff "${{ env.CONFIG_FILE }}.backup" "${{ env.CONFIG_FILE }}" | \
            grep -E "^[<>].*rev:" | \
            sed 's/^[<>].*rev: //' | \
            sort -u | \
            wc -l)

          echo "hooks_updated=$UPDATED_HOOKS" >> $GITHUB_OUTPUT
          echo "✅ Number of hooks updated: $UPDATED_HOOKS"

          # Clean up backup
          rm "${{ env.CONFIG_FILE }}.backup"

      # ————————————————————————————————————————————————————————————————
      # Configure git
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Configure git
        if: steps.check_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true'
        run: |
          echo "🔧 Configuring git..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # ————————————————————————————————————————————————————————————————
      # Check for existing PRs with base branch pattern
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Check for existing PRs
        id: check_branch
        if: steps.check_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true'
        run: |
          echo "🔍 Checking for existing PRs with similar branch pattern..."

          # Since we use unique timestamped branches, this branch is always new
          echo "🆕 Using unique branch: ${{ env.BRANCH_NAME }}"
          echo "branch_exists=false" >> $GITHUB_OUTPUT
          echo "pr_exists=false" >> $GITHUB_OUTPUT

          # Check if there are other open PRs for pre-commit updates (for info only)
          existing_prs=$(gh pr list --head "${{ env.BASE_BRANCH_NAME }}*" --json number,title,headRefName --jq '.[] | select(.headRefName | startswith("${{ env.BASE_BRANCH_NAME }}")) | .number' || echo "")
          if [ -n "$existing_prs" ]; then
            echo "ℹ️ Found existing pre-commit update PRs: $existing_prs"
            echo "💡 These will remain open - consider closing them if this update supersedes them"
          else
            echo "✅ No existing pre-commit update PRs found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # Create or update branch and commit changes
      # ————————————————————————————————————————————————————————————————
      - name: 🌿 Create branch and commit changes
        if: steps.check_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true'
        run: |
          echo "🌿 Preparing to commit changes..."

          # Create unique timestamped branch (always new)
          echo "🆕 Creating unique timestamped branch: ${{ env.BRANCH_NAME }}"
          git checkout -b "${{ env.BRANCH_NAME }}"

          # Stage the changes
          git add "${{ env.CONFIG_FILE }}"

          # Create detailed commit message
          commit_msg="chore(deps): update pre-commit hooks

          Automated pre-commit hook update:
          - Updated hooks to latest versions using 'pre-commit autoupdate --freeze'
          - Migrated configuration if needed
          - Number of hooks updated: ${{ steps.analyze_changes.outputs.hooks_updated }}
          - Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}

          🤖 Generated by GitHub Actions"

          git commit -m "$commit_msg"

          # Push the branch
          git push origin "${{ env.BRANCH_NAME }}" --force-with-lease
          echo "✅ Changes committed and pushed to ${{ env.BRANCH_NAME }}"

      # ————————————————————————————————————————————————————————————————
      # Test updated hooks (optional verification)
      # ————————————————————————————————————————————————————————————————
      - name: 🧪 Test updated hooks
        if: steps.check_changes.outputs.has_changes == 'true' && env.TEST_HOOKS == 'true'
        continue-on-error: true # Don't fail workflow if hooks have issues
        run: |
          echo "🧪 Testing updated pre-commit hooks..."
          echo "════════════════════════════════════════════════════════════════"

          # Install the hooks
          pre-commit install

          # Try to run hooks on configuration file first
          echo "📋 Testing hooks on configuration file..."
          if pre-commit run --files "${{ env.CONFIG_FILE }}"; then
            echo "✅ Configuration file passed all hooks"
          else
            echo "⚠️ Some hooks failed on configuration file (this is normal)"
          fi

          # Run on a sample of files to check general functionality
          echo ""
          echo "📋 Running quick validation on sample files..."
          if find . -name "*.yml" -o -name "*.yaml" | head -5 | xargs pre-commit run --files; then
            echo "✅ Sample files passed all hooks"
          else
            echo "⚠️ Some hooks failed on sample files (will be addressed in PR)"
          fi

          echo "════════════════════════════════════════════════════════════════"
          echo "✅ Hook testing completed (see above for any issues)"

      # ————————————————————————————————————————————————————————————————
      # Create a new pull request using GitHub CLI
      # ————————————————————————————————————————————————————————————————
      - name: 🔀 Create pull request
        if: steps.check_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true'
        run: |
          echo "🔀 Creating new pull request..."

          # Verify we have commits to create PR with
          if ! git log --oneline origin/master..HEAD | grep -q .; then
            echo "❌ No commits found between origin/master and HEAD"
            echo "This might indicate the branch was created but no changes were committed"
            exit 1
          fi

          # Generate detailed PR body
          pr_body="## 🤖 Automated Pre-commit Hooks Update

          This PR updates all pre-commit hooks to their latest versions.

          ### 📋 Changes Made
          - Updated hooks using \`pre-commit autoupdate --freeze\` for reproducible builds
          - Migrated configuration if needed
          - Number of hooks updated: **${{ steps.analyze_changes.outputs.hooks_updated }}**
          - Automated update run on $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ### 🔍 What's Updated
          All hooks in \`${{ env.CONFIG_FILE }}\` have been updated to their latest compatible versions.

          ### ✅ Benefits
          - 🔧 Latest code quality tools and fixes
          - 🔒 Security improvements from updated dependencies
          - 🐛 Bug fixes in linting and formatting tools
          - 📦 Better compatibility with current codebase
          - 🚀 Performance improvements in linters

          ### 🧪 Testing Status
          $(if [ "${{ env.TEST_HOOKS }}" = "true" ]; then
            echo "Pre-commit hooks were tested after update - check workflow logs for results."
          else
            echo "Hook testing was skipped. Run \`pre-commit run --all-files\` locally to test."
          fi)

          ### 📝 Next Steps
          1. **Review the changes** in the Files tab
          2. **Check CI status** - automated tests will verify compatibility
          3. **Test locally** with \`pre-commit run --all-files\` if desired
          4. **Merge when ready** - no manual action needed unless issues arise
          5. **Close older pre-commit PRs** if this update supersedes them

          ### 🔐 Security Notes
          - All Python packages installed use hash verification (\`--require-hashes\`)
          - Hook versions are frozen for reproducible builds
          - Configuration follows security best practices

          ### 🤖 Automation Details
          - **Workflow:** \`${{ github.workflow }}\`
          - **Trigger:** ${{ github.event_name }}
          - **Branch:** \`${{ env.BRANCH_NAME }}\` (timestamped for uniqueness)
          - **Run ID:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---

          **Note:** This PR was created automatically. To customize updates:
          1. Modify \`${{ env.CONFIG_FILE }}\` manually
          2. Push changes to the \`${{ env.BRANCH_NAME }}\` branch
          3. Or close this PR and disable the scheduled workflow if updates are not desired"

          # Create the pull request
          pr_url=$(gh pr create \
            --title "chore(deps): update pre-commit hooks" \
            --body "$pr_body" \
            --head "${{ env.BRANCH_NAME }}" \
            --base master \
            --label "${{ env.PR_LABELS }}" \
            --assignee "${{ env.PR_ASSIGNEE }}")

          echo "✅ Pull request created: $pr_url"

          # Add a comment with the specific changes
          gh pr comment "$pr_url" --body "### 📊 Configuration Changes

          \`\`\`diff
          $(git diff origin/master...HEAD -- "${{ env.CONFIG_FILE }}" | head -100)
          \`\`\`

          ### 💡 Tips for Testing

          **Quick test (recommended):**
          \`\`\`bash
          pre-commit run --all-files
          \`\`\`

          **Test specific hooks:**
          \`\`\`bash
          pre-commit run <hook-id> --all-files
          \`\`\`

          **Update hooks manually:**
          \`\`\`bash
          pre-commit autoupdate
          \`\`\`"

        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

  # ----------------------------------------------------------------------------------
  # Generate Workflow Summary Report
  # ----------------------------------------------------------------------------------
  summary:
    name: 📊 Generate Summary
    if: always()
    needs: [load-env, update-hooks]
    runs-on: ubuntu-latest
    steps:
      # ————————————————————————————————————————————————————————————————
      # Generate a workflow summary report
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Generate workflow summary
        env:
          ENV_JSON: ${{ needs.load-env.outputs.env-json }}
        run: |
          echo "📊 Generating workflow summary..."

          echo "# 🪝 Pre-commit Hooks Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⏰ Completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.update-hooks.outputs.has_changes }}" = "true" ]; then
            echo "## ✅ Changes Detected and Processed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Metric | 📈 Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Status** | 🔄 Hooks updated |" >> $GITHUB_STEP_SUMMARY
            echo "| **Hooks Modified** | ${{ needs.update-hooks.outputs.hooks_updated }} |" >> $GITHUB_STEP_SUMMARY

            # Extract configuration from env-json
            CONFIG_FILE=$(echo "$ENV_JSON" | jq -r '.PRE_COMMIT_CONFIG_FILE')
            BRANCH_NAME=$(echo "$ENV_JSON" | jq -r '.UPDATE_PRE_COMMIT_HOOKS_BRANCH')

            echo "| **Config File** | \`$CONFIG_FILE\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Branch Pattern** | \`$BRANCH_NAME\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Action** | Created new timestamped pull request |" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ℹ️ No Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All pre-commit hooks are already at their latest versions." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Workflow Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "- **Create PR:** ${{ github.event.inputs.create_pr }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Hooks:** ${{ github.event.inputs.test_hooks }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🤖 _Automated by GitHub Actions_" >> $GITHUB_STEP_SUMMARY

      # ————————————————————————————————————————————————————————————————
      # Report final workflow status
      # ————————————————————————————————————————————————————————————————
      - name: 📢 Report workflow status
        run: |
          echo "=== 🪝 Pre-commit Hooks Update Summary ==="
          if [ "${{ needs.update-hooks.result }}" = "success" ]; then
            if [ "${{ needs.update-hooks.outputs.has_changes }}" = "true" ]; then
              echo "✅ Status: Created new timestamped pull request"
              echo "📊 Hooks updated: ${{ needs.update-hooks.outputs.hooks_updated }}"
            else
              echo "ℹ️ Status: No changes detected - hooks are up to date"
            fi
          else
            echo "❌ Status: Workflow encountered errors"
          fi
          echo "🕐 Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "✅ Workflow completed!"

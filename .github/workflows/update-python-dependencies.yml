# ------------------------------------------------------------------------------------
#  Update Python Dependencies Workflow
#
#  Purpose: Automatically update all Python dependencies in the .github/pip/ directory
#           and open pull requests with the changes. This workflow manages:
#           - Main requirements (requirements.txt/in)
#           - pip-tools requirements (pip-tools-requirements.txt/in)
#           - Any future Python dependency files in .github/pip/
#
#  Configuration: All settings are loaded from .github/.env.shared for centralized
#  management across all workflows.
#
#  Triggers:
#  - Scheduled: Every Monday at 12:00 UTC (7:00 AM EST)
#  - Manual: Via workflow_dispatch with options to update specific files
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: Update Python Dependencies

# ————————————————————————————————————————————————————————————————
# Trigger Configuration
# ————————————————————————————————————————————————————————————————
on:
  schedule:
    # ┌─ min ┬─ hour ┬─ dom ┬─ mon ┬─ dow ┐
    - cron: "0 12 * * 1-5" # 7:00 AM EST (12:00 UTC)
  workflow_dispatch: # Allow manual triggering from the GitHub UI
    inputs:
      update_main:
        description: "Update main requirements.txt"
        required: false
        default: true
        type: boolean
      update_pip_tools:
        description: "Update pip-tools-requirements.txt"
        required: false
        default: true
        type: boolean
      create_pr:
        description: "Create pull request with changes"
        required: false
        default: true
        type: boolean

# ————————————————————————————————————————————————————————————————
# Permissions
# ————————————————————————————————————————————————————————————————
permissions:
  contents: read

# ————————————————————————————————————————————————————————————————
# Concurrency Control
# ————————————————————————————————————————————————————————————————
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ————————————————————————————————————————————————————————————————
# Environment Variables
# ————————————————————————————————————————————————————————————————
# Note: Configuration variables are loaded from .github/.env.shared

jobs:
  # ----------------------------------------------------------------------------------
  # Load Environment Variables from .env.shared
  # ----------------------------------------------------------------------------------
  load-env:
    name: 🌍 Load Environment Variables
    runs-on: ubuntu-latest
    outputs:
      env-json: ${{ steps.load-env.outputs.env-json }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Check out code to access env file
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code (sparse)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          sparse-checkout: |
            .github/.env.shared
            .github/actions/load-env

      # ————————————————————————————————————————————————————————————————
      # Load and parse environment file
      # ————————————————————————————————————————————————————————————————
      - name: 🌍 Load environment variables
        uses: ./.github/actions/load-env
        id: load-env

  # ----------------------------------------------------------------------------------
  # Update Python Dependencies
  # ----------------------------------------------------------------------------------
  update-dependencies:
    name: 📦 Update Python Dependencies
    needs: [load-env]
    runs-on: ubuntu-latest
    permissions:
      contents: write # For creating branches and commits
      pull-requests: write # For creating PRs
    outputs:
      has_changes: ${{ steps.check_all_changes.outputs.has_changes }}
      pr_exists: ${{ steps.check_branch.outputs.pr_exists }}
      pr_number: ${{ steps.check_branch.outputs.pr_number }}

    steps:
      # ————————————————————————————————————————————————————————————————
      # Extract configuration from env-json
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Extract configuration
        id: config
        env:
          ENV_JSON: ${{ needs.load-env.outputs.env-json }}
        run: |
          echo "📋 Extracting configuration from environment..."

          # Extract all needed variables
          BRANCH_NAME=$(echo "$ENV_JSON" | jq -r '.UPDATE_PYTHON_DEPENDENCIES_BRANCH')
          PIP_DIR=$(echo "$ENV_JSON" | jq -r '.PIP_DIRECTORY')
          PREFERRED_TOKEN=$(echo "$ENV_JSON" | jq -r '.PREFERRED_GITHUB_TOKEN')
          PR_LABELS=$(echo "$ENV_JSON" | jq -r '.UPDATE_PYTHON_DEPENDENCIES_PR_LABELS')
          PR_ASSIGNEE=$(echo "$ENV_JSON" | jq -r '.UPDATE_PYTHON_DEPENDENCIES_PR_ASSIGNEE')

          # Validate required configuration
          if [[ -z "$BRANCH_NAME" ]] || [[ "$BRANCH_NAME" == "null" ]]; then
            echo "❌ ERROR: UPDATE_PYTHON_DEPENDENCIES_BRANCH not set in .env.shared" >&2
            exit 1
          fi
          if [[ -z "$PIP_DIR" ]] || [[ "$PIP_DIR" == "null" ]]; then
            echo "❌ ERROR: PIP_DIRECTORY not set in .env.shared" >&2
            exit 1
          fi

          # Set as environment variables for all subsequent steps
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "PIP_DIR=$PIP_DIR" >> $GITHUB_ENV
          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV
          echo "PR_ASSIGNEE=$PR_ASSIGNEE" >> $GITHUB_ENV

          # Determine which files to update based on workflow inputs
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "UPDATE_MAIN=${{ github.event.inputs.update_main }}" >> $GITHUB_ENV
            echo "UPDATE_PIP_TOOLS=${{ github.event.inputs.update_pip_tools }}" >> $GITHUB_ENV
            echo "CREATE_PR=${{ github.event.inputs.create_pr }}" >> $GITHUB_ENV
          else
            # Default behavior for scheduled runs - all configurable from .env.shared
            DEFAULT_UPDATE_MAIN=$(echo "$ENV_JSON" | jq -r '.UPDATE_PYTHON_DEPENDENCIES_SCHEDULE_UPDATE_MAIN')
            DEFAULT_UPDATE_PIP_TOOLS=$(echo "$ENV_JSON" | jq -r '.UPDATE_PYTHON_DEPENDENCIES_SCHEDULE_UPDATE_PIP_TOOLS')
            DEFAULT_CREATE_PR=$(echo "$ENV_JSON" | jq -r '.UPDATE_PYTHON_DEPENDENCIES_SCHEDULE_CREATE_PR')

            echo "UPDATE_MAIN=$DEFAULT_UPDATE_MAIN" >> $GITHUB_ENV
            echo "UPDATE_PIP_TOOLS=$DEFAULT_UPDATE_PIP_TOOLS" >> $GITHUB_ENV
            echo "CREATE_PR=$DEFAULT_CREATE_PR" >> $GITHUB_ENV
          fi

          # Log configuration
          echo "🔍 Configuration loaded:"
          echo "  📁 Pip directory: $PIP_DIR"
          echo "  🌿 Update branch: $BRANCH_NAME"
          echo "  📋 Update main requirements: ${{ env.UPDATE_MAIN }}"
          echo "  🔧 Update pip-tools requirements: ${{ env.UPDATE_PIP_TOOLS }}"
          echo "  🔀 Create PR: ${{ env.CREATE_PR }}"

          if [[ "$PREFERRED_TOKEN" == "GH_PAT_TOKEN" && -n "${{ secrets.GH_PAT_TOKEN }}" ]]; then
            echo "  🔑 Token: Personal Access Token (PAT)"
          else
            echo "  🔑 Token: Default GITHUB_TOKEN"
          fi

      # ————————————————————————————————————————————————————————————————
      # Check out the repository
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Full history for branch operations

      # ————————————————————————————————————————————————————————————————
      # Set up Python for dependency management
      # ————————————————————————————————————————————————————————————————
      - name: 🐍 Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"

      # ————————————————————————————————————————————————————————————————
      # Cache pip downloads to speed up later runs
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Cache pip dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/pip/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ————————————————————————————————————————————————————————————————
      # Install pip-tools using secure method
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Install pip-tools
        run: |
          echo "🔧 Installing pip-tools..."

          # SECURITY: All pip installs MUST use --require-hashes
          if [ -f "${{ env.PIP_DIR }}/pip-tools-requirements.txt" ]; then
            echo "📦 Installing from pip-tools-requirements.txt..."
            pip install --require-hashes -r "${{ env.PIP_DIR }}/pip-tools-requirements.txt"
            echo "✅ pip-tools installed with hash verification"
          else
            echo "❌ ERROR: pip-tools-requirements.txt not found in ${{ env.PIP_DIR }}"
            echo "❌ This file is required for secure pip-tools installation"
            exit 1
          fi

          # Verify installation
          pip-compile --version
          echo "✅ pip-tools ready"

      # ————————————————————————————————————————————————————————————————
      # Create backups of all files for comparison
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Backup original files
        run: |
          echo "💾 Creating backups of all requirement files..."

          # Find all .txt files in pip directory and create backups
          find "${{ env.PIP_DIR }}" -name "*.txt" -type f | while read -r file; do
            cp "$file" "${file}.backup"
            echo "  📄 Backed up: $file"
          done

          echo "✅ All backups created"

      # ————————————————————————————————————————————————————————————————
      # Update pip-tools requirements
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Update pip-tools requirements
        if: env.UPDATE_PIP_TOOLS == 'true'
        id: update_pip_tools
        run: |
          echo "🔧 Updating pip-tools requirements..."

          cd "${{ env.PIP_DIR }}"

          if [ -f "pip-tools-requirements.in" ]; then
            echo "📝 Found pip-tools-requirements.in, compiling with hash verification..."
            pip-compile --upgrade --generate-hashes \
              pip-tools-requirements.in \
              --output-file pip-tools-requirements.txt \
              --resolver=backtracking \
              --verbose

            # Check for changes
            if ! cmp -s "pip-tools-requirements.txt" "pip-tools-requirements.txt.backup"; then
              echo "✅ pip-tools requirements updated"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "ℹ️ No changes in pip-tools requirements"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ pip-tools-requirements.in not found, skipping"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————————————————————————————————————————————
      # Update main requirements
      # ————————————————————————————————————————————————————————————————
      - name: 📦 Update main requirements
        if: env.UPDATE_MAIN == 'true'
        id: update_main
        run: |
          echo "📦 Updating main requirements..."

          cd "${{ env.PIP_DIR }}"

          # Check if custom update script exists
          if [ -f "../scripts/update_pip_requirements.py" ]; then
            echo "🐍 Running custom update script..."
            python ../scripts/update_pip_requirements.py
          elif [ -f "requirements.in" ]; then
            echo "📝 Found requirements.in, compiling with hash verification..."
            pip-compile --upgrade --generate-hashes \
              requirements.in \
              --output-file requirements.txt \
              --resolver=backtracking \
              --verbose
          else
            echo "⚠️ No requirements.in found, attempting to upgrade existing requirements.txt..."

            # Extract package names from existing requirements
            if [ -f "requirements.txt" ]; then
              grep -v '^#' requirements.txt | \
                grep -v '^--' | \
                cut -d' ' -f1 | \
                grep -v '^$' | \
                sed 's/==.*//' > temp-requirements.in

              if [ -s temp-requirements.in ]; then
                echo "📝 Extracted packages from existing requirements:"
                cat temp-requirements.in

                pip-compile --upgrade --generate-hashes \
                  temp-requirements.in \
                  --output-file requirements.txt \
                  --resolver=backtracking \
                  --verbose

                rm temp-requirements.in
              else
                echo "⚠️ Could not extract package list from existing requirements"
              fi
            fi
          fi

          # Check for changes
          if [ -f "requirements.txt.backup" ] && ! cmp -s "requirements.txt" "requirements.txt.backup"; then
            echo "✅ Main requirements updated"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No changes in main requirements"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————————————————————————————————————————————
      # Check all files for changes
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Check for all changes
        id: check_all_changes
        run: |
          echo "🔍 Checking for changes across all requirement files..."

          changes_found=false
          changed_files=()

          # Check all .txt files against their backups
          find "${{ env.PIP_DIR }}" -name "*.txt.backup" -type f | while read -r backup; do
            original="${backup%.backup}"
            if ! cmp -s "$original" "$backup"; then
              changes_found=true
              filename=$(basename "$original")
              changed_files+=("$filename")
              echo "  📝 Changed: $filename"

              # Show summary of changes
              echo "  📊 Changes in $filename:"
              diff -u "$backup" "$original" | grep -E '^[+-]' | grep -v '^[+-]#' | head -10 || true
            fi
          done

          if [ "$changes_found" = true ]; then
            echo "✅ Changes detected in requirement files"
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Count total changes
            total_changes=$(find "${{ env.PIP_DIR }}" -name "*.txt" -type f -exec sh -c '
              backup="${1}.backup"
              if [ -f "$backup" ] && ! cmp -s "$1" "$backup"; then
                diff "$backup" "$1" | grep -E "^[<>]" | grep -v "^[<>] #" | wc -l
              fi
            ' sh {} \; | awk '{sum += $1} END {print sum}')

            echo "changed_count=$total_changes" >> $GITHUB_OUTPUT
            echo "  📊 Total package changes: ~$total_changes"
          else
            echo "ℹ️ No changes detected in any requirement files"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "changed_count=0" >> $GITHUB_OUTPUT
          fi

          # Clean up backups
          find "${{ env.PIP_DIR }}" -name "*.backup" -type f -delete
          echo "🧹 Cleaned up backup files"

      # ————————————————————————————————————————————————————————————————
      # Configure git
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Configure git
        if: steps.check_all_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true'
        run: |
          echo "🔧 Configuring git..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # ————————————————————————————————————————————————————————————————
      # Check if PR branch already exists
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Check for existing PR branch
        id: check_branch
        if: steps.check_all_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true'
        run: |
          echo "🔍 Checking for existing branch and PR..."

          # Check if branch exists remotely
          if git ls-remote --exit-code --heads origin "${{ env.BRANCH_NAME }}" >/dev/null 2>&1; then
            echo "🌿 Branch ${{ env.BRANCH_NAME }} already exists remotely"
            echo "branch_exists=true" >> $GITHUB_OUTPUT

            # Check if there's already an open PR
            pr_number=$(gh pr list --head "${{ env.BRANCH_NAME }}" --json number --jq '.[0].number // empty')
            if [ -n "$pr_number" ]; then
              echo "📋 Open PR already exists: #$pr_number"
              echo "pr_exists=true" >> $GITHUB_OUTPUT
              echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            else
              echo "🌿 Branch exists but no open PR found"
              echo "pr_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "🆕 Branch ${{ env.BRANCH_NAME }} does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # Create or update branch and commit changes
      # ————————————————————————————————————————————————————————————————
      - name: 🌿 Create branch and commit changes
        if: steps.check_all_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true'
        run: |
          echo "🌿 Preparing to commit changes..."

          # Create or switch to the branch
          if [ "${{ steps.check_branch.outputs.branch_exists }}" = "true" ]; then
            echo "🔄 Switching to existing branch..."
            git fetch origin "${{ env.BRANCH_NAME }}"
            git checkout "${{ env.BRANCH_NAME }}"
            git merge origin/main --no-edit || echo "⚠️ Merge conflicts may need manual resolution"
          else
            echo "🆕 Creating new branch..."
            git checkout -b "${{ env.BRANCH_NAME }}"
          fi

          # Stage all changes in pip directory
          git add "${{ env.PIP_DIR }}/"

          # Create detailed commit message
          commit_msg="chore(deps): update python dependencies

          Automated dependency update:
          - Updated Python packages to latest versions
          - All packages use hash verification for security
          - Total packages modified: ~${{ steps.check_all_changes.outputs.changed_count }}
          - Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}

          🤖 Generated by GitHub Actions"

          git commit -m "$commit_msg"

          # Push the branch
          git push origin "${{ env.BRANCH_NAME }}" --force-with-lease
          echo "✅ Changes committed and pushed to ${{ env.BRANCH_NAME }}"

      # ————————————————————————————————————————————————————————————————
      # Create a new pull request using GitHub CLI
      # ————————————————————————————————————————————————————————————————
      - name: 🔀 Create new pull request
        if: steps.check_all_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true' && steps.check_branch.outputs.pr_exists != 'true'
        run: |
          echo "🔀 Creating new pull request..."

          # Generate detailed PR body
          pr_body="## 🤖 Automated Python Dependencies Update

          This PR updates Python dependencies in \`${{ env.PIP_DIR }}/\`.

          ### 📋 Changes Made
          - Updated Python packages to their latest compatible versions
          - All packages use hash verification for security
          - Automated update run on $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ### 📦 Updated Files
          \`\`\`
          $(git diff --name-only origin/main...HEAD | grep "${{ env.PIP_DIR }}" || echo "No files shown")
          \`\`\`

          ### 🔍 What's Updated
          Review the Files tab to see specific version changes for each package.

          ### ✅ Benefits
          - 🔒 Security patches and vulnerability fixes
          - 🚀 Performance improvements and bug fixes
          - 📦 New features from updated dependencies
          - 🔧 Better compatibility with modern Python environments

          ### 🧪 Next Steps
          1. **Review the changes** in the Files tab
          2. **Check CI status** - automated tests will verify compatibility
          3. **Merge when ready** - no manual action needed unless tests fail

          ### 🔐 Security Notes
          - All packages use hash verification (\`--require-hashes\`)
          - Hashes are automatically updated with package versions
          - This ensures package integrity and prevents tampering

          ### 📝 Configuration
          - **Main requirements:** \`${{ env.PIP_DIR }}/requirements.in\` → \`requirements.txt\`
          - **pip-tools:** \`${{ env.PIP_DIR }}/pip-tools-requirements.in\` → \`pip-tools-requirements.txt\`

          ### 🤖 Automation Details
          - **Workflow:** \`${{ github.workflow }}\`
          - **Trigger:** ${{ github.event_name }}
          - **Run ID:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---

          **Note:** This PR was created automatically. To customize the update process:
          1. Modify \`.in\` files in \`${{ env.PIP_DIR }}/\`
          2. Update \`.github/scripts/update_pip_requirements.py\` for custom logic
          3. Push changes to the \`${{ env.BRANCH_NAME }}\` branch"

          # Create the pull request
          pr_url=$(gh pr create \
            --title "chore(deps): update python dependencies" \
            --body "$pr_body" \
            --head "${{ env.BRANCH_NAME }}" \
            --base main \
            --label "${{ env.PR_LABELS }}" \
            --assignee "${{ env.PR_ASSIGNEE }}")

          echo "✅ Pull request created: $pr_url"

          # Add a comment with the specific changes
          gh pr comment "$pr_url" --body "### 📊 Package Changes

          \`\`\`diff
          $(git diff origin/main...HEAD -- "${{ env.PIP_DIR }}/" | grep -E '^[+-]' | grep -v '^[+-]#' | head -50)
          \`\`\`

          **Tip:** You can test these changes locally by running:
          \`\`\`bash
          pip install --require-hashes -r ${{ env.PIP_DIR }}/requirements.txt
          \`\`\`"

        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # Update existing PR if changes detected
      # ————————————————————————————————————————————————————————————————
      - name: 🔄 Update existing PR
        if: steps.check_all_changes.outputs.has_changes == 'true' && env.CREATE_PR == 'true' && steps.check_branch.outputs.pr_exists == 'true'
        run: |
          pr_number="${{ steps.check_branch.outputs.pr_number }}"

          echo "🔄 Updating existing PR #$pr_number with new changes..."

          # Add comment about the update
          gh pr comment "$pr_number" --body "### 🔄 Dependencies Updated Again

          New changes detected and committed to this PR:
          - Updated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Run ID: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Latest Changes:
          \`\`\`diff
          $(git diff HEAD~1 -- "${{ env.PIP_DIR }}/" | grep -E '^[+-]' | grep -v '^[+-]#' | head -50)
          \`\`\`

          The PR now contains the most recent package versions available."

          echo "✅ Existing PR #$pr_number updated with new changes"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GITHUB_TOKEN }}

      # ————————————————————————————————————————————————————————————————
      # Test updated requirements (optional verification)
      # ————————————————————————————————————————————————————————————————
      - name: 🧪 Test updated requirements
        if: steps.check_all_changes.outputs.has_changes == 'true'
        continue-on-error: true # Don't fail workflow if test installation has issues
        run: |
          echo "🧪 Testing updated requirements..."

          # Create a virtual environment for testing
          python -m venv test-env
          source test-env/bin/activate || . test-env/Scripts/activate

          # Test each requirements file
          for req_file in "${{ env.PIP_DIR }}"/*.txt; do
            if [ -f "$req_file" ]; then
              echo "📦 Testing $(basename "$req_file")..."
              if pip install --require-hashes -r "$req_file"; then
                echo "  ✅ $(basename "$req_file") installed successfully"
              else
                echo "  ⚠️ $(basename "$req_file") had installation issues"
              fi
            fi
          done

          # Show installed versions
          echo "📋 Installed packages:"
          pip list

          # Clean up
          deactivate || true
          rm -rf test-env

  # ----------------------------------------------------------------------------------
  # Generate Workflow Summary Report
  # ----------------------------------------------------------------------------------
  summary:
    name: 📊 Generate Summary
    if: always()
    needs: [load-env, update-dependencies]
    runs-on: ubuntu-latest
    steps:
      # ————————————————————————————————————————————————————————————————
      # Generate a workflow summary report
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Generate workflow summary
        env:
          ENV_JSON: ${{ needs.load-env.outputs.env-json }}
        run: |
          echo "📊 Generating workflow summary..."

          echo "# 📦 Python Dependencies Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⏰ Completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.update-dependencies.outputs.has_changes }}" = "true" ]; then
            echo "## ✅ Changes Detected and Processed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Metric | 📈 Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Status** | 🔄 Dependencies updated |" >> $GITHUB_STEP_SUMMARY
            echo "| **Packages Modified** | ~${{ needs.update-dependencies.outputs.changed_count }} |" >> $GITHUB_STEP_SUMMARY

            # Extract configuration from env-json
            PIP_DIR=$(echo "$ENV_JSON" | jq -r '.PIP_DIRECTORY')
            BRANCH_NAME=$(echo "$ENV_JSON" | jq -r '.UPDATE_PYTHON_DEPENDENCIES_BRANCH')

            echo "| **Directory** | \`$PIP_DIR\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Branch** | \`$BRANCH_NAME\` |" >> $GITHUB_STEP_SUMMARY

            if [ "${{ needs.update-dependencies.outputs.pr_exists }}" = "true" ]; then
              echo "| **Action** | Updated existing PR #${{ needs.update-dependencies.outputs.pr_number }} |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Action** | Created new pull request |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ℹ️ No Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Python dependencies are already at their latest versions." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Workflow Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "- **Update Main:** ${{ github.event.inputs.update_main }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Update pip-tools:** ${{ github.event.inputs.update_pip_tools }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Create PR:** ${{ github.event.inputs.create_pr }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🤖 _Automated by GitHub Actions_" >> $GITHUB_STEP_SUMMARY

      # ————————————————————————————————————————————————————————————————
      # Report final workflow status
      # ————————————————————————————————————————————————————————————————
      - name: 📢 Report workflow status
        run: |
          echo "=== 📦 Python Dependencies Update Summary ==="
          if [ "${{ needs.update-dependencies.result }}" = "success" ]; then
            if [ "${{ needs.update-dependencies.outputs.has_changes }}" = "true" ]; then
              if [ "${{ needs.update-dependencies.outputs.pr_exists }}" = "true" ]; then
                echo "✅ Status: Updated existing PR #${{ needs.update-dependencies.outputs.pr_number }}"
              else
                echo "✅ Status: Created new pull request"
              fi
              echo "📊 Packages updated: ~${{ needs.update-dependencies.outputs.changed_count }}"
            else
              echo "ℹ️ Status: No changes detected - dependencies are up to date"
            fi
          else
            echo "❌ Status: Workflow encountered errors"
          fi
          echo "🕐 Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "✅ Workflow completed!"

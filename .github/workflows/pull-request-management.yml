# ------------------------------------------------------------------------------------
#  Pull Request Management Workflow
#
#  Purpose: Automatically manages PR labels, assignments, and welcomes new contributors
#
#  Triggers: On pull request events (opened, reopened, ready for review)
#
#  Maintainer: @mrz1836
# ------------------------------------------------------------------------------------

name: pull-request-management

# ————————————————————————————————————————————————————————————————
# Trigger Configuration
# ————————————————————————————————————————————————————————————————
on:
  pull_request:
    types: [ opened, reopened, ready_for_review ]

# ————————————————————————————————————————————————————————————————
# Permissions
# ————————————————————————————————————————————————————————————————
permissions:
  contents: read

# ————————————————————————————————————————————————————————————————
# Concurrency Control
# ————————————————————————————————————————————————————————————————
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

# ————————————————————————————————————————————————————————————————
# Environment Variables
# ————————————————————————————————————————————————————————————————
env:
  DEFAULT_ASSIGNEE: mrz1836

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Apply labels based on branch prefix AND PR title keywords
  # ---------------------------------------------------------------------------
  apply-labels:
    name: Apply Branch & Title Based Labels
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    if: |
      !contains(fromJSON('["dependabot[bot]", "mergify[bot]", "copilot[bot]"]'), github.event.pull_request.user.login)

    steps:
      - name: Apply labels based on branch prefix and PR title
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const branch = context.payload.pull_request.head.ref;
            const prTitle = context.payload.pull_request.title;
            const prNumber = context.payload.pull_request.number;

            console.log(`Processing branch: ${branch}`);
            console.log(`Processing PR title: ${prTitle}`);

            // Branch-based label rules (prefix matching)
            const branchRules = [
              { pattern: /^(bug)?fix\//i, labels: ['bug-P3'] },
              { pattern: /^chore\//i, labels: ['chore', 'update'] },
              { pattern: /^deps\//i, labels: ['chore', 'dependencies'] },
              { pattern: /^docs\//i, labels: ['documentation', 'update'] },
              { pattern: /^feat(ure)?\//i, labels: ['feature'] },
              { pattern: /^hotfix\//i, labels: ['hot-fix'] },
              { pattern: /^idea\//i, labels: ['idea'] },
              { pattern: /^proto(type)?\//i, labels: ['prototype', 'idea'] },
              { pattern: /^question\//i, labels: ['question'] },
              { pattern: /^refactor\//i, labels: ['refactor'] },
              { pattern: /^test\//i, labels: ['test'] },
            ];

            // Title-based label rules (keyword matching)
            const titleRules = [
              { pattern: /\b(fix|bug|error|issue|problem|broken)\b/i, labels: ['bug-P3'] },
              { pattern: /\b(chore|cleanup|maintenance|housekeeping)\b/i, labels: ['chore', 'update'] },
              { pattern: /\b(deps?|dependencies|dependency|upgrade|update.*deps?)\b/i, labels: ['chore', 'dependencies'] },
              { pattern: /\b(docs?|documentation|readme|guide|manual)\b/i, labels: ['documentation', 'update'] },
              { pattern: /\b(feat|feature|add|new|implement|enhancement)\b/i, labels: ['feature'] },
              { pattern: /\b(hotfix|urgent|critical|emergency)\b/i, labels: ['hot-fix'] },
              { pattern: /\b(idea|proposal|suggestion|concept)\b/i, labels: ['idea'] },
              { pattern: /\b(prototype|proto|draft|experiment|poc|proof.of.concept)\b/i, labels: ['prototype', 'idea'] },
              { pattern: /\b(question|help|how.to|unclear|clarification)\b/i, labels: ['question'] },
              { pattern: /\b(refactor|restructure|reorganize|cleanup|improve)\b/i, labels: ['refactor'] },
              { pattern: /\b(test|testing|spec|coverage|unit.test|integration.test)\b/i, labels: ['test'] },
              { pattern: /\b(security|vulnerability|CVE|exploit|patch)\b/i, labels: ['security'] },
              { pattern: /\b(performance|perf|optimization|optimize|speed|slow)\b/i, labels: ['performance'] },
              { pattern: /\b(breaking.change|breaking|major|incompatible)\b/i, labels: ['requires-manual-review'] },
              { pattern: /\b(wip|work.in.progress|draft|incomplete)\b/i, labels: ['work-in-progress'] },
            ];

            // Collect labels from both branch and title
            const labelsToAdd = new Set(); // Use Set to avoid duplicates

            // Check branch patterns
            console.log('--- Checking branch patterns ---');
            for (const rule of branchRules) {
              if (rule.pattern.test(branch)) {
                rule.labels.forEach(label => labelsToAdd.add(label));
                console.log(`Branch matched ${rule.pattern} -> adding: ${rule.labels.join(', ')}`);
              }
            }

            // Check title patterns
            console.log('--- Checking title patterns ---');
            for (const rule of titleRules) {
              if (rule.pattern.test(prTitle)) {
                rule.labels.forEach(label => labelsToAdd.add(label));
                console.log(`Title matched ${rule.pattern} -> adding: ${rule.labels.join(', ')}`);
              }
            }

            const finalLabels = Array.from(labelsToAdd);

            if (finalLabels.length === 0) {
              console.log('No patterns matched in branch or title, skipping label application');
              return;
            }

            console.log(`--- Total labels to apply: ${finalLabels.join(', ')} ---`);

            // Get existing labels to avoid duplicates
            try {
              const { data: existingLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });

              const existingLabelNames = existingLabels.map(label => label.name);
              const newLabels = finalLabels.filter(label => !existingLabelNames.includes(label));

              if (newLabels.length > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: newLabels,
                });
                console.log(`✅ Added new labels: ${newLabels.join(', ')}`);

                if (existingLabelNames.length > 0) {
                  console.log(`ℹ️ Labels already present: ${existingLabelNames.join(', ')}`);
                }
              } else {
                console.log('All matching labels already present, no changes needed');
                console.log(`ℹ️ Existing labels: ${existingLabelNames.join(', ')}`);
              }
            } catch (error) {
              console.error(`❌ Failed to apply labels: ${error.message}`);
              // Don't fail the entire workflow for label issues
            }

  # ---------------------------------------------------------------------------
  # Job 2: Assign default assignee if needed
  # ---------------------------------------------------------------------------
  assign-default-assignee:
    name: Assign Default Assignee
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write

    if: |
      !contains(fromJSON('["dependabot[bot]", "mergify[bot]", "copilot[bot]"]'), github.event.pull_request.user.login) &&
      github.event.pull_request.head.repo.owner.login == github.repository_owner

    steps:
      - name: Assign default assignee if none assigned
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const assignees = pr.assignees || [];

            if (assignees.length > 0) {
              console.log(`PR already has ${assignees.length} assignee(s): ${assignees.map(a => a.login).join(', ')}`);
              console.log('Skipping default assignment');
              return;
            }

            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                assignees: [process.env.DEFAULT_ASSIGNEE],
              });

              console.log(`✅ Assigned PR to ${process.env.DEFAULT_ASSIGNEE}`);

            } catch (error) {
              console.error(`❌ Failed to assign PR: ${error.message}`);
              // Don't fail the workflow for assignment issues
            }

  # ---------------------------------------------------------------------------
  # Job 3: Welcome new contributors
  # ---------------------------------------------------------------------------
  welcome-contributor:
    name: Welcome New Contributors
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write

    if: |
      github.event.action == 'opened' &&
      contains(fromJSON('["FIRST_TIMER", "FIRST_TIME_CONTRIBUTOR"]'), github.event.pull_request.author_association) &&
      !contains(fromJSON('["dependabot[bot]", "mergify[bot]", "copilot[bot]"]'), github.event.pull_request.user.login) &&
      github.event.pull_request.head.repo.owner.login == github.repository_owner

    steps:
      - name: Welcome new contributor
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const author = context.payload.pull_request.user.login;
            const repoName = context.repo.repo;
            const repoOwner = context.repo.owner;

            const welcomeMessage = `## 👋 Welcome, @${author}!

            Thank you for opening your first pull request in **${repoOwner}/${repoName}**!

            Here's what happens next:
            - 🤖 Automated tests will run to check your changes
            - 👀 A maintainer will review your contribution
            - 💬 You might receive feedback or suggestions
            - ✅ Once approved, your PR will be merged

            **Need help?** Feel free to ask questions in the comments below.

            Thanks for contributing to the project! 🎉`;

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: welcomeMessage,
              });

              console.log(`✅ Posted welcome comment for new contributor @${author}`);

            } catch (error) {
              console.error(`❌ Failed to post welcome comment: ${error.message}`);
            }

  # ---------------------------------------------------------------------------
  # Job 4: PR size analysis
  # ---------------------------------------------------------------------------
  analyze-pr-size:
    name: Analyze PR Size
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
    if: github.event.action == 'opened'

    steps:
      - name: Add size label based on changes
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const totalChanges = additions + deletions;

            let sizeLabel = '';
            if (totalChanges <= 10) {
              sizeLabel = 'size/XS';
            } else if (totalChanges <= 50) {
              sizeLabel = 'size/S';
            } else if (totalChanges <= 200) {
              sizeLabel = 'size/M';
            } else if (totalChanges <= 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }

            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: [sizeLabel],
              });

              console.log(`✅ Added size label: ${sizeLabel} (${totalChanges} changes)`);

            } catch (error) {
              console.error(`❌ Failed to add size label: ${error.message}`);
            }

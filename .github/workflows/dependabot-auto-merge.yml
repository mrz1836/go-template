# ------------------------------------------------------------------------------
#  Dependabot Auto-merge Workflow
#
#  Purpose: Automatically merge Dependabot **minor / patch** updates once all
#           required checks pass.  Major updates only get an alert comment.
#
#  Triggers: Pull request events for better reliability and immediate response
#
#  Maintainer: @mrz1836
#
#  Rules for Auto‑Merge:
#    • PR must be opened by Dependabot (detected via official metadata)
#    • All required status checks must pass (enforced by branch protection)
#    • Only minor and patch updates are auto-merged
#    • Major updates receive alert comments and require manual review
#    • Uses GitHub's native auto-merge feature for better integration
#    • Development dependencies get more permissive auto-merge rules
# ------------------------------------------------------------------------------

name: dependabot-auto-merge

on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  auto-merge:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write

    # Only run on Dependabot PRs
    if: github.event.pull_request.user.login == 'dependabot[bot]'

    steps:
      # -----------------------------------------------------------------------
      # 1. Get official Dependabot metadata
      # -----------------------------------------------------------------------
      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # -----------------------------------------------------------------------
      # 2. Log dependency information for debugging
      # -----------------------------------------------------------------------
      - name: Log dependency details
        run: |
          echo "Dependency name: ${{ steps.metadata.outputs.dependency-names }}"
          echo "Update type: ${{ steps.metadata.outputs.update-type }}"
          echo "Dependency type: ${{ steps.metadata.outputs.dependency-type }}"
          echo "Package ecosystem: ${{ steps.metadata.outputs.package-ecosystem }}"
          echo "New version: ${{ steps.metadata.outputs.new-version }}"
          echo "Previous version: ${{ steps.metadata.outputs.previous-version }}"

      # -----------------------------------------------------------------------
      # 3. Alert on major version updates - with duplicate prevention
      # -----------------------------------------------------------------------
      - name: Alert on major version bump
        if: steps.metadata.outputs.update-type == 'version-update:semver-major'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const dependency = '${{ steps.metadata.outputs.dependency-names }}';
            const newVersion = '${{ steps.metadata.outputs.new-version }}';
            const previousVersion = '${{ steps.metadata.outputs.previous-version }}';

            const commentBody = `⚠️ @mrz1836 – **Major version update detected**

            **Dependency:** \`${dependency}\`
            **Version:** \`${previousVersion}\` → \`${newVersion}\`
            **Type:** ${{ steps.metadata.outputs.dependency-type }}

            This requires manual review for potential breaking changes.`;

            // Check for existing alert comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              per_page: 100
            });

            const alertExists = comments.some(comment =>
              comment.body.includes('Major version update detected') &&
              comment.body.includes(dependency)
            );

            if (!alertExists) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: commentBody
              });

              // Add label for tracking
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['requires-manual-review']
              });
            } else {
              console.log('Major version alert already exists, skipping duplicate comment');
            }

      # -----------------------------------------------------------------------
      # 4. Auto-approve and merge patch updates (safest)
      # -----------------------------------------------------------------------
      - name: Auto-approve and merge patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: |
          echo "Processing patch update for ${{ steps.metadata.outputs.dependency-names }}"
          gh pr review --approve "$PR_URL" --body "✅ Auto-approving patch update: ${{ steps.metadata.outputs.previous-version }} → ${{ steps.metadata.outputs.new-version }}"
          gh pr merge --auto --squash "$PR_URL"
          echo "✅ Enabled auto-merge for patch update"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      # -----------------------------------------------------------------------
      # 5. Auto-approve and merge minor updates for development dependencies
      # -----------------------------------------------------------------------
      - name: Auto-approve minor updates for dev dependencies
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-minor' &&
          steps.metadata.outputs.dependency-type == 'direct:development'
        run: |
          echo "Processing minor development dependency update"
          gh pr review --approve "$PR_URL" --body "✅ Auto-approving minor development dependency update: ${{ steps.metadata.outputs.previous-version }} → ${{ steps.metadata.outputs.new-version }}"
          gh pr merge --auto --squash "$PR_URL"
          echo "✅ Enabled auto-merge for minor dev dependency"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      # -----------------------------------------------------------------------
      # 6. Alert on minor production dependency updates
      # -----------------------------------------------------------------------
      - name: Alert on minor production dependency updates
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-minor' &&
          steps.metadata.outputs.dependency-type == 'direct:production'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const dependency = '${{ steps.metadata.outputs.dependency-names }}';
            const newVersion = '${{ steps.metadata.outputs.new-version }}';
            const previousVersion = '${{ steps.metadata.outputs.previous-version }}';

            const commentBody = `🔍 @mrz1836 – **Minor production dependency update**

            **Dependency:** \`${dependency}\`
            **Version:** \`${previousVersion}\` → \`${newVersion}\`
            **Type:** Production dependency

            Please review for potential feature changes or compatibility issues.`;

            // Check for existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              per_page: 100
            });

            const commentExists = comments.some(comment =>
              comment.body.includes('Minor production dependency update') &&
              comment.body.includes(dependency)
            );

            if (!commentExists) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: commentBody
              });

              //await github.rest.issues.addLabels({
              //  owner: context.repo.owner,
              //  repo: context.repo.repo,
              //  issue_number: issueNumber,
              //  labels: ['requires-manual-review']
              //});
            }

      # -----------------------------------------------------------------------
      # 7. Handle security updates with elevated auto-merge
      # -----------------------------------------------------------------------
      - name: Auto-approve security updates
        if: |
          contains(join(github.event.pull_request.labels.*.name, ','), 'security') ||
          contains(github.event.pull_request.title, 'security') ||
          contains(github.event.pull_request.body, 'security')
        run: |
          echo "Security update detected - auto-approving regardless of semver level"
          gh pr review --approve "$PR_URL" --body "🔒 Auto-approving security update for ${{ steps.metadata.outputs.dependency-names }}"

          # Only auto-merge security patches and minors, not majors
          if [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-patch" ]] || \
             [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-minor" ]]; then
            gh pr merge --auto --squash "$PR_URL"
            echo "🔒 Enabled auto-merge for security update"
          else
            echo "🔒 Security major update requires manual merge"
            gh pr comment "$PR_URL" --body "🔒 **Security major update** - Auto-approved but requires manual merge due to potential breaking changes."
          fi
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      # -----------------------------------------------------------------------
      # 8. Add tracking labels for all auto-merged PRs
      # -----------------------------------------------------------------------
      - name: Add auto-merge labels
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||
          steps.metadata.outputs.update-type == 'version-update:semver-minor'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['automerge', 'dependabot']
            });

      # -----------------------------------------------------------------------
      # 9. Report final status
      # -----------------------------------------------------------------------
      - name: Report processing status
        run: |
          echo "=== Dependabot Auto-Merge Summary ==="
          echo "Dependency: ${{ steps.metadata.outputs.dependency-names }}"
          echo "Update type: ${{ steps.metadata.outputs.update-type }}"
          echo "Dependency type: ${{ steps.metadata.outputs.dependency-type }}"
          echo "Previous version: ${{ steps.metadata.outputs.previous-version }}"
          echo "New version: ${{ steps.metadata.outputs.new-version }}"

          if [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-patch" ]]; then
            echo "✅ Action: Auto-merged (patch update)"
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-minor" ]] && \
               [[ "${{ steps.metadata.outputs.dependency-type }}" == "direct:development" ]]; then
            echo "✅ Action: Auto-merged (minor dev dependency)"
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-minor" ]] && \
               [[ "${{ steps.metadata.outputs.dependency-type }}" == "direct:production" ]]; then
            echo "🔍 Action: Requires manual review (minor production dependency)"
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-major" ]]; then
            echo "⚠️ Action: Requires manual review (major update)"
          else
            echo "❓ Action: Unknown update type, manual review recommended"
          fi
